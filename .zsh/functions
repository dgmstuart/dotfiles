# Blog
function newpost(){
  cd ${BLOG_HOME:?"Need to set BLOG_HOME to the location of the octopress blog directory"}
  output=$( octopress new post "$@" )
  echo "$output"

  local return_code=$?
  if [ $return_code -eq 0 ]; then
    # Get the name of the file which was just created:
    post_path=$(grep -o '_posts\/.*\.markdown' <<< $output)
    # Stash all other posts (for faster generation)
    echo "Isolating post..."
    octopress isolate $post_path
    # Open with the cursor at the bottom of the header:
    vim -c 'normal G' $post_path
  fi
}

# Git
function gitfeature() {
  usage="usage: gitfeature \#12135 Users can do a thing"
  if [[ -z "$1" || -z "$2" ]] ; then
    echo $usage
    return
  fi

  id=$1
  id=${id//\#} # Remove hashes

  shift # Get the rest of the arguments

  story_name=$@
  story_name=$(echo "$story_name" | awk '{print tolower($0)}') # downcase
  story_name=${story_name// /-} # replace spaces with dashes

  branch_name="feature/$id-$story_name"
  git checkout -b $branch_name
}

# fuzzy checkout branch names with fzf:
# https://coderwall.com/p/ba8afa/git-branch-fuzzy-search-checkout
fbr() {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m --exact --query=$1) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

# Remove branches from the main listing of branches by putting a tag on them
# and deleting the branch
archive_branch() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local default_branch=$(git config --get init.defaultBranch)
  git tag "archive/$current_branch" "$current_branch"
  git checkout "$default_branch"
  git branch -D "$current_branch"
}

# Php testing
# Work out what testing library is being used and run the appropriate commands
function ptest() {
  if [ -f 'peridot.php' ]
  then
    [[ $# -eq 0 ]] && target='specs' || target=$1
    vendor/bin/peridot -r dot $target
  elif [ -f 'phpunit.xml' ]
  then
    # If $1 is null, no arg will be passed, and all tests will be run
    vendor/bin/phpunit $1
  else
    echo "Couldn't find a peridot.php or phpunit.xml file"
  fi
}

# Maintenance
function rmtemp(){
  if [ -s *~ ]; then
    rm *~
  fi
  if [ -s .*~ ]; then
    rm .*~
  fi
}

# Display the top N used commands
function top_commands() {
  history | tail -2000 | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -${1:-20}
}

# Display the amount of free space left on disk
function freespace() {
  df -hl | grep /dev/disk1 | awk '{ print $(4) }';
}

function ip() {
  ifconfig en0| awk '/inet /{print $2}'
}

# Show battery percentage if there's an internal battery
function battery() {
  power_usage=(pmset -g batt)
  if ($power_usage | egrep "InternalBattery" --quiet)
  then
    result=`$power_usage | egrep "([0-9]+\%)" -o`

    if (( ${+1} ))
    then
      # add another percent character so that zsh will interpret it as a literal percent symbol
      result+="%"
    fi

    echo $result
  fi
}

# Run an arbitrary command in a new iTerm tab
function run_in_iterm_tab() {
  open -a iTerm .
  osascript -e "tell application \"iTerm\" to tell current window to tell last tab to tell current session to write text \"$1\""
}
